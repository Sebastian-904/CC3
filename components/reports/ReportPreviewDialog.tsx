import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogClose, DialogDescription } from '../ui/Dialog';
import Button from '../ui/Button';
import { Printer, Download, Loader2 } from 'lucide-react';
import { GanttChartSquare } from 'lucide-react';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

interface ReportPreviewDialogProps {
    isOpen: boolean;
    onClose: () => void;
    title: string;
    companyName: string;
    children: React.ReactNode;
}

// This component creates the professional layout for the PDF
const ReportLayoutForPDF = ({ title, companyName, children }: { title: string, companyName: string, children: React.ReactNode }) => (
    <div id="report-content" className="p-8 bg-white text-black">
        {/* Header */}
        <header className="flex justify-between items-center pb-4 border-b border-gray-200">
            <div className="flex items-center gap-2">
                <GanttChartSquare className="h-7 w-7 text-blue-600" />
                <span className="text-xl font-bold text-gray-800">CompliancePro</span>
            </div>
            <div className="text-right">
                <h2 className="text-lg font-semibold text-gray-700">{companyName}</h2>
            </div>
        </header>
        
        {/* Title Section */}
        <section className="text-center my-8">
            <h1 className="text-3xl font-bold text-gray-900">{title}</h1>
            <p className="text-sm text-gray-500 mt-2">Generated on: {new Date().toLocaleDateString()}</p>
        </section>

        {/* Main Content */}
        <main>
            {children}
        </main>

        {/* Footer */}
        <footer className="text-center text-xs text-gray-400 mt-8 pt-4 border-t border-gray-200">
            <p>Report generated by CompliancePro. Confidential and proprietary.</p>
        </footer>
    </div>
);


const ReportPreviewDialog: React.FC<ReportPreviewDialogProps> = ({ isOpen, onClose, title, companyName, children }) => {
    const [isDownloading, setIsDownloading] = useState(false);
    
    if (!isOpen) return null;

    const handlePrint = () => {
        window.print();
    };

    const handleDownloadPdf = async () => {
        const reportContentElement = document.getElementById('report-content');
        if (!reportContentElement) {
            console.error("Report content element not found!");
            return;
        }

        setIsDownloading(true);

        try {
            // Temporarily make the background white for canvas capture
            const originalBg = reportContentElement.style.backgroundColor;
            reportContentElement.style.backgroundColor = 'white';

            const canvas = await html2canvas(reportContentElement, {
                scale: 2,
                useCORS: true,
            });

            // Restore original background
            reportContentElement.style.backgroundColor = originalBg;

            const imgData = canvas.toDataURL('image/png');
            
            const pdf = new jsPDF('p', 'mm', 'a4');
            const pdfWidth = pdf.internal.pageSize.getWidth();
            const pdfHeight = pdf.internal.pageSize.getHeight();
            
            const imgProps = pdf.getImageProperties(imgData);
            const imgWidth = imgProps.width;
            const imgHeight = imgProps.height;
            
            const ratio = imgWidth / imgHeight;
            let width = pdfWidth - 20; // 10mm margin on each side
            let height = width / ratio;

            if (height > pdfHeight - 20) {
                height = pdfHeight - 20;
                width = height * ratio;
            }

            const x = (pdfWidth - width) / 2;
            const y = 10;

            pdf.addImage(imgData, 'PNG', x, y, width, height);
            
            const filename = `${title.toLowerCase().replace(/[^a-z0-9]/g, '-')}.pdf`;
            pdf.save(filename);

        } catch (error) {
            console.error("Error generating PDF:", error);
            alert("Sorry, there was an error generating the PDF. Please try again.");
        } finally {
            setIsDownloading(false);
        }
    };

    return (
        <Dialog isOpen={isOpen} onClose={onClose}>
            <div className="print-boundary relative w-full max-w-4xl mx-4 bg-card rounded-lg shadow-xl border animate-in fade-in-90 zoom-in-95 print:shadow-none print:border-none print:w-full print:max-w-none print:h-full print:rounded-none">
                <DialogHeader className="print:hidden">
                    <DialogTitle>Report Preview</DialogTitle>
                    <DialogDescription>Review the report before printing or downloading.</DialogDescription>
                    <DialogClose onClose={onClose} />
                </DialogHeader>
                <DialogContent className="max-h-[70vh] overflow-y-auto p-0 print:max-h-none print:overflow-visible print:p-0">
                   {/* We render the professional layout here for both preview and download */}
                   <ReportLayoutForPDF title={title} companyName={companyName}>
                        {children}
                   </ReportLayoutForPDF>
                </DialogContent>
                <DialogFooter className="print:hidden">
                    <Button type="button" variant="outline" onClick={onClose}>Close</Button>
                    <Button type="button" onClick={handlePrint}>
                        <Printer className="mr-2 h-4 w-4" />
                        Print
                    </Button>
                    <Button type="button" onClick={handleDownloadPdf} disabled={isDownloading}>
                        {isDownloading ? (
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        ) : (
                            <Download className="mr-2 h-4 w-4" />
                        )}
                        {isDownloading ? 'Generating...' : 'Download PDF'}
                    </Button>
                </DialogFooter>
            </div>
             <style>{`
                @media print {
                    body > * { visibility: hidden; }
                    .print-boundary, .print-boundary * { visibility: visible; }
                    .print-boundary { position: absolute; left: 0; top: 0; width: 100%; }
                }
            `}</style>
        </Dialog>
    );
};

export default ReportPreviewDialog;