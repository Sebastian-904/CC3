
import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogClose, DialogDescription } from '../ui/Dialog';
import Button from '../ui/Button';
import { GanttChartSquare, Printer, Download, Mail } from 'lucide-react';
import jspdf from 'jspdf';
import html2canvas from 'html2canvas';
import ShareViaEmailDialog from '../ShareViaEmailDialog';

interface ReportPreviewDialogProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  companyName: string;
  children: React.ReactNode;
}


const ReportLayoutForPDF = React.forwardRef<HTMLDivElement, { title: string; companyName: string; children: React.ReactNode }>(({ title, companyName, children }, ref) => (
    <div ref={ref} className="p-8 bg-white text-black font-sans">
        {/* Printable Header */}
        <header className="mb-8">
            <div className="flex justify-between items-center">
                <div className="flex items-center gap-2">
                    <GanttChartSquare className="h-7 w-7 text-primary" />
                    <span className="text-xl font-bold">CompliancePro</span>
                </div>
                <div className="text-right">
                    <p className="text-2xl font-semibold">{companyName}</p>
                </div>
            </div>
            <hr className="my-4 border-gray-300" />
        </header>

        <main>
             <div className="text-center mb-8">
                 <h1 className="text-3xl font-bold">{title}</h1>
                 <p className="text-sm text-gray-500">Generated: {new Date().toLocaleDateString()}</p>
             </div>
            {children}
        </main>
        
        <footer className="mt-8 pt-4 border-t border-gray-300 text-center text-xs text-gray-400">
            <p>Report generated by CompliancePro</p>
        </footer>
    </div>
));


const ReportPreviewDialog: React.FC<ReportPreviewDialogProps> = ({ isOpen, onClose, title, companyName, children }) => {
    const [isDownloading, setIsDownloading] = useState(false);
    const [isShareOpen, setIsShareOpen] = useState(false);
    
    const handleDownload = async () => {
        const content = document.getElementById('report-content');
        if (!content) {
            alert("Report content element not found!");
            return;
        }

        setIsDownloading(true);
        try {
            const canvas = await html2canvas(content, { scale: 2 });
            const imgData = canvas.toDataURL('image/png');
            
            const pdf = new jspdf({
                orientation: 'portrait',
                unit: 'px',
                format: [canvas.width, canvas.height]
            });

            pdf.addImage(imgData, 'PNG', 0, 0, canvas.width, canvas.height);
            pdf.save(`${title.replace(/\s/g, '_')}_${companyName}.pdf`);
        } catch (error) {
            console.error("Error generating PDF:", error);
            alert("Sorry, there was an error generating the PDF.");
        } finally {
            setIsDownloading(false);
        }
    };
    
    return (
        <>
            <Dialog isOpen={isOpen} onClose={onClose}>
                <div className="relative w-full max-w-4xl mx-4 bg-card rounded-lg shadow-xl border animate-in fade-in-90 zoom-in-95" onClick={e => e.stopPropagation()}>
                    <DialogHeader>
                        <DialogTitle>{title}</DialogTitle>
                        <DialogDescription>Report preview for {companyName}</DialogDescription>
                        <DialogClose onClose={onClose} />
                    </DialogHeader>
                    <DialogContent id="report-content-wrapper" className="max-h-[70vh] overflow-y-auto bg-gray-200 dark:bg-gray-900">
                        {/* The actual content to be captured for PDF is inside ReportLayoutForPDF */}
                        <ReportLayoutForPDF title={title} companyName={companyName} ref={null}>
                            {children}
                        </ReportLayoutForPDF>
                    </DialogContent>
                    <DialogFooter>
                        <Button variant="outline" onClick={onClose}>Close</Button>
                         <Button variant="secondary" onClick={() => setIsShareOpen(true)}>
                            <Mail className="mr-2 h-4 w-4" /> Share via Email
                        </Button>
                        <Button onClick={handleDownload} disabled={isDownloading}>
                            <Download className="mr-2 h-4 w-4" /> 
                            {isDownloading ? 'Downloading...' : 'Download PDF'}
                        </Button>
                    </DialogFooter>
                </div>
                 {/* This is the hidden div that will actually be used for PDF generation */}
                <div className="hidden">
                     <div id="report-content">
                        <ReportLayoutForPDF title={title} companyName={companyName} ref={null}>
                            {children}
                        </ReportLayoutForPDF>
                    </div>
                </div>
            </Dialog>
            <ShareViaEmailDialog
                isOpen={isShareOpen}
                onClose={() => setIsShareOpen(false)}
                documentTitle={title}
            />
        </>
    );
};

export default ReportPreviewDialog;